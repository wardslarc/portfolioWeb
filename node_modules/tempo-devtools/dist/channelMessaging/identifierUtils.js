"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isElementInSvg = exports.isSkipNavTreeNode = exports.isMovingElement = exports.getAllUnknownClasses = exports.getAllUnknownClasesFromList = exports.isOutline = exports.hasClass = exports.getElementKeyFromNode = exports.getUniquePathFromNode = exports.getCodebaseIdFromNode = exports.getCodebaseIdFromClassName = exports.validateUuid = exports.clearElementKeyForUniquePath = exports.setElementKeyForUniquePath = exports.getElementKeyForUniquePath = exports.clearNodeForElementKey = exports.setNodeForElementKey = exports.getNodeForElementKey = exports.KNOWN_ATTRIBUTES = exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = exports.TEMPO_TEST_ID = exports.TEMPO_ELEMENT_ID = exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = exports.TEMPO_OUTLINE_UNTIL_REFESH = exports.TEMPO_DELETE_AFTER_REFRESH = exports.TEMPO_INSTANT_UPDATE = exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = exports.TEMPO_INSTANT_DIV_DRAW_CLASS = exports.EDIT_TEXT_BUTTON = exports.OUTLINE_CLASS = void 0;
const changeItemFunctions_1 = require("./changeItemFunctions");
// Must match identifier utils on the frontend
exports.OUTLINE_CLASS = 'arb89-outline';
exports.EDIT_TEXT_BUTTON = 'arb89-edit-text-button';
exports.TEMPO_INSTANT_DIV_DRAW_CLASS = 'arb89-instant-div-draw';
exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = 'arb89-move-between-parents-outline';
exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = 'arb89-styling-';
exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = 'arb89-display-none-until-refresh';
exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = 'arb89-delete-after-instant-update';
const KNOWN_CLASSES = new Set([
    exports.OUTLINE_CLASS,
    exports.TEMPO_INSTANT_DIV_DRAW_CLASS,
    exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE,
    exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS,
    changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID,
    changeItemFunctions_1.TEMPORARY_STYLING_CLASS_NAME,
    exports.EDIT_TEXT_BUTTON,
]);
const KNOWN_CLASS_PREFIXES = [
    exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX,
    changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX,
    changeItemFunctions_1.ADD_JSX_PREFIX,
];
// Attributes that are set until the next Nav Tree Refresh
exports.TEMPO_INSTANT_UPDATE = 'arb89-instant-update';
exports.TEMPO_DELETE_AFTER_REFRESH = 'arb89-delete-after-refresh';
exports.TEMPO_OUTLINE_UNTIL_REFESH = 'arb89-outline-until-refresh';
exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = 'arb89-do-not-show-in-nav';
exports.TEMPO_ELEMENT_ID = 'tempoelementid';
exports.TEMPO_TEST_ID = 'data-testid';
exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = 'arb89-queue-delete-after-hot-reload';
exports.KNOWN_ATTRIBUTES = new Set([
    exports.TEMPO_INSTANT_UPDATE,
    exports.TEMPO_DELETE_AFTER_REFRESH,
    exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE,
    exports.TEMPO_OUTLINE_UNTIL_REFESH,
    exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD,
    exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH,
    exports.TEMPO_ELEMENT_ID,
    exports.TEMPO_TEST_ID,
]);
let elementKeyToNodeMap = {};
const getNodeForElementKey = (elementKey) => {
    if (!elementKey)
        return null;
    return elementKeyToNodeMap[elementKey];
};
exports.getNodeForElementKey = getNodeForElementKey;
const setNodeForElementKey = (elementKey, node) => {
    elementKeyToNodeMap[elementKey] = node;
};
exports.setNodeForElementKey = setNodeForElementKey;
const clearNodeForElementKey = () => {
    elementKeyToNodeMap = {};
};
exports.clearNodeForElementKey = clearNodeForElementKey;
let uniquePathToElementKeyMap = {};
const getElementKeyForUniquePath = (uniquePath) => {
    return uniquePathToElementKeyMap[uniquePath] || null;
};
exports.getElementKeyForUniquePath = getElementKeyForUniquePath;
const setElementKeyForUniquePath = (uniquePath, elementKey) => {
    uniquePathToElementKeyMap[uniquePath] = elementKey;
};
exports.setElementKeyForUniquePath = setElementKeyForUniquePath;
const clearElementKeyForUniquePath = () => {
    uniquePathToElementKeyMap = {};
};
exports.clearElementKeyForUniquePath = clearElementKeyForUniquePath;
const validateUuid = (uuid) => {
    return new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i').test(uuid);
};
exports.validateUuid = validateUuid;
const getCodebaseIdFromClassName = (className) => {
    if (className &&
        className.startsWith('tempo-') &&
        ((0, exports.validateUuid)(className.substring('tempo-'.length)) ||
            className === changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID ||
            className.startsWith(changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX))) {
        return className;
    }
    return null;
};
exports.getCodebaseIdFromClassName = getCodebaseIdFromClassName;
const getCodebaseIdFromNode = (node) => {
    var _a;
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        // A bit of a hack -> in the case when there are multiple tempo codebase IDs on an element
        // we want to use the first one defined. This happens in the case of forward refs, and we
        // always add the bottom-most className to the end of the classes list, so we want to
        // show the top-most element in this case
        if (clsFound) {
            return;
        }
        if (!cls) {
            return;
        }
        const extractedId = (0, exports.getCodebaseIdFromClassName)(cls);
        if (extractedId) {
            clsFound = extractedId;
        }
    });
    if (clsFound) {
        return clsFound;
    }
    if (((_a = node === null || node === void 0 ? void 0 : node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'body') {
        return 'body';
    }
    if ((node === null || node === void 0 ? void 0 : node.id) == 'root') {
        return 'root';
    }
    if ((node === null || node === void 0 ? void 0 : node.id) == '__next') {
        return '__next';
    }
    return null;
};
exports.getCodebaseIdFromNode = getCodebaseIdFromNode;
const getUniquePathFromNode = (node) => {
    var _a, _b;
    // The unique path is the index of the node in the parent overall chain
    // E.g. 0-1-2-1-2-4-1-0
    const path = [];
    let currentNode = node;
    while (currentNode && ((_a = currentNode.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'body') {
        const index = Array.from(((_b = currentNode.parentElement) === null || _b === void 0 ? void 0 : _b.children) || []).indexOf(currentNode);
        if (index === -1) {
            path.push('0');
        }
        else {
            path.push(index.toString());
        }
        currentNode = currentNode.parentElement;
    }
    return '0-' + path.reverse().join('-');
};
exports.getUniquePathFromNode = getUniquePathFromNode;
const getElementKeyFromNode = (node) => {
    const uniquePath = (0, exports.getUniquePathFromNode)(node);
    return (0, exports.getElementKeyForUniquePath)(uniquePath);
};
exports.getElementKeyFromNode = getElementKeyFromNode;
const hasClass = (node, klass) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return false;
    }
    let hasClass = false;
    node.classList.forEach((cls) => {
        if (cls == klass) {
            hasClass = true;
        }
    });
    return hasClass;
};
exports.hasClass = hasClass;
const isOutline = (node) => {
    return (0, exports.hasClass)(node, exports.OUTLINE_CLASS);
};
exports.isOutline = isOutline;
const getAllUnknownClasesFromList = (classes) => {
    return classes.filter((cls) => {
        if (!cls) {
            return false;
        }
        const isCodebaseId = (0, exports.getCodebaseIdFromClassName)(cls) !== null;
        const clsStartsWithKnownPrefix = KNOWN_CLASS_PREFIXES.some((prefix) => cls.startsWith(prefix));
        if (!clsStartsWithKnownPrefix && !KNOWN_CLASSES.has(cls) && !isCodebaseId) {
            return true;
        }
        return false;
    });
};
exports.getAllUnknownClasesFromList = getAllUnknownClasesFromList;
const getAllUnknownClasses = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return [];
    }
    return (0, exports.getAllUnknownClasesFromList)(Array.from(node.classList));
};
exports.getAllUnknownClasses = getAllUnknownClasses;
/**
 * Accepts a node from mutation observer and determines if it's a moving element.
 * Returns moving if and only if the node has the attribute `arb89-instant-update` set to true.
 * @param node
 * @returns
 */
const isMovingElement = (node) => {
    if (!node) {
        return false;
    }
    // Check if the node responds to getAttribute method.
    if (typeof node.getAttribute !== 'function') {
        return false;
    }
    return node.getAttribute(exports.TEMPO_INSTANT_UPDATE) === 'true';
};
exports.isMovingElement = isMovingElement;
const isSkipNavTreeNode = (node) => {
    if (!node) {
        return;
    }
    return node.getAttribute(exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH) === 'true';
};
exports.isSkipNavTreeNode = isSkipNavTreeNode;
/**
 * Check if the node has any parent that is an svg tag
 */
const isElementInSvg = (node, parent) => {
    var _a;
    if (!node) {
        return false;
    }
    if (parent && ((_a = node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'svg') {
        return true;
    }
    if (node.parentNode) {
        return (0, exports.isElementInSvg)(node.parentNode, true);
    }
    return false;
};
exports.isElementInSvg = isElementInSvg;
//# sourceMappingURL=data:application/json;base64,